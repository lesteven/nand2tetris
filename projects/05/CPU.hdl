// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // A register
    Mux16(a=instruction,b=aluout,sel=instruction[15],out=m1out); 
    /* write to A reg if a instruction or d1 == 1 */
    Not(in=instruction[15],out=abit);
    Or(a=abit,b=instruction[5],out=awrite);
    ARegister(in=m1out,load=awrite,out=aout,out[0..14]=addressM); 

    /* if a-bit=0, then pick A, else pick M */
    And(a=instruction[15], b=instruction[12], out=wmux);
    Mux16(a=aout,b=inM,sel=wmux,out=amout); 

    // D Register
    And(a=instruction[15], b=instruction[4], out=writeD);
    DRegister(in=aluout,load=writeD,out=dout); 

    // ALU
    And(a=instruction[15], b=instruction[11], out=wzx);
    And(a=instruction[15], b=instruction[10], out=wnx);
    And(a=instruction[15], b=instruction[9], out=wzy);
    And(a=instruction[15], b=instruction[8], out=wny);
    And(a=instruction[15], b=instruction[7], out=wf);
    And(a=instruction[15], b=instruction[6], out=wno);
    ALU(x=dout,y=amout,zx=wzx,nx=wnx,zy=wzy,ny=wny,f=wf,no=wno,out=aluout,out=outM,zr=zr,ng=ng); 


    // PC
    /* jmp instructions */
    Not(in=instruction[2], out=nj1);
    Not(in=instruction[1], out=nj2);
    Not(in=instruction[0], out=nj3);
    /* for GT */
    Not(in=zr,out=nzr);
    Not(in=ng,out=nng);

    /* JGT */
    And5(a=nzr, b=nng, c=nj1, d=nj2, e=instruction[0],out=jgt);
    /* JGE */
    Or(a=zr, b=nng,out=prejge);
    And5(a=prejge, b=true, c=nj1, d=instruction[1], e=instruction[0], out=jge);
    /* JEQ -> zr */
    And5(a=zr, b=true, c=nj1, d=instruction[1], e=nj3, out=jeq);
    /* JLT  -> ng */
    And5(a=ng, b=true, c=instruction[2], d=nj2, e=nj3, out=jlt);
    /* JNE  -> nzr */
    And5(a=nzr,b=true, c=instruction[2], d=nj2, e=instruction[0],out=jne);
    /* JLE */
    Or(a=zr,b=ng,out=prejle);
    And5(a=prejle,b=true,c=instruction[2],d=instruction[1], e=nj3, out=jle);
    /* JMP */
    And3(a=instruction[2],b=instruction[1],c=instruction[0], out=jmp);

    Or8(a=jgt,b=jge,c=jeq,d=jlt,e=jne,f=jle,g=jmp,h=false,out=canjump);

    /* not to write as 1 and only write if c-instruction */
    And(a=instruction[15], b=canjump, out=wPC);
    PC(in=aout,load=wPC,inc=true,reset=reset,out[0..14]=pc); 

    // writeM
    And(a=instruction[15],b=instruction[3],out=writeM);
}
